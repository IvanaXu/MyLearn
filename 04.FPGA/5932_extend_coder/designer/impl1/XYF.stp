NOTE "CREATOR" "Designer Version: 9.1.0.18";
NOTE "CAPTURE" "9.1.0.18";
NOTE "DEVICE" "A3P030";
NOTE "PACKAGE" "A3P030-vq100";
NOTE "DATE" "2014/01/03";
NOTE "TIME" "22:03:33";
NOTE "STAPL_VERSION" "JESD71";
NOTE "VENDOR" "Actel Corporation";
NOTE "IDCODE" "049011CF";
NOTE "IDMASK" "07FFFFFF";
NOTE "DESIGN" "XYF";
NOTE "DESIGN_DIRECTORY" "D:\Actelprj\1401\5932_extend_coder\designer\impl1\";
NOTE "CHECKSUM" "7283";
NOTE "SECURITY" "Disable";
NOTE "ALG_VERSION" "20";
NOTE "MAP_VERSION" "1";
NOTE "TOOL_VERSION" "1";
NOTE "MAX_FREQ" "10000000";
NOTE "SILSIG" "00000000";
NOTE "TRACKING_SAR" "76713";
NOTE "SPEED_GRAD" "-2";
NOTE "TEMP_GRAD" "COM";

ACTION PROGRAM = 
       VERIFY_IDCODE,
       SET_PRG_ARRAY,
       W_INITIALIZE,
       DO_ERASE,
       DO_PROGRAM,
       DO_VERIFY_BOL,
       DO_PROGRAM_RLOCK,
       DO_VERIFY_PGM_RLOCK,
       DO_EXIT;
ACTION PROGRAM_ARRAY = 
       VERIFY_IDCODE,
       SET_PRG_ARRAY,
       AW_INITIALIZE,
       DO_ERASE_ARRAY,
       DO_PROGRAM,
       DO_VERIFY_BOL,
       DO_PROGRAM_RLOCK,
       DO_VERIFY_PGM_RLOCK,
       DO_EXIT;
ACTION ERASE_ARRAY = 
       VERIFY_IDCODE,
       AW_INITIALIZE,
       DO_ERASE_ARRAY_ONLY,
       DO_EXIT;
ACTION ERASE = 
       VERIFY_IDCODE,
       W_INITIALIZE,
       DO_ERASE_ONLY,
       DO_EXIT;
ACTION ERASE_ALL = 
       VERIFY_IDCODE,
       INITIALIZE,
       DO_ERASE_ALL,
       DO_EXIT;
ACTION VERIFY = 
       VERIFY_IDCODE,
       R_INITIALIZE,
       DO_VERIFY_EOL,
       DO_VERIFY_RLOCK,
       DO_EXIT;
ACTION VERIFY_ARRAY = 
       VERIFY_IDCODE,
       AR_INITIALIZE,
       DO_VERIFY_EOL,
       DO_VERIFY_RLOCK,
       DO_EXIT;
ACTION READ_IDCODE = 
       DO_READ_IDCODE;
ACTION VERIFY_DEVICE_INFO = 
       VERIFY_IDCODE,
       READ_INITIALIZE,
       READ_IDCODE_ONLY,
       DO_VERIFY_DEVICE_INFO,
       DO_EXIT;
ACTION DEVICE_INFO = 
       VERIFY_IDCODE,
       READ_INITIALIZE,
       READ_IDCODE_ONLY,
       DO_DEVICE_INFO,
       DO_QUERY_SECURITY,
       DO_EXIT;



DATA CONSTBLOCK;
    INTEGER IEEE1532=0;
    INTEGER STAPL=1;
    INTEGER DIRECTC=2;
    INTEGER PDB=3;
    INTEGER SVF=4;
    INTEGER IAP=5;
    INTEGER FP=0;
    INTEGER FPLITE=1;
    INTEGER FP3=2;
    INTEGER SCULPTW=3;
    INTEGER BPW=4;
    INTEGER DIRECTCP=5;
    INTEGER STP=6;
    INTEGER FP4=7;
    INTEGER FP33=0;
    INTEGER FP34=1;
    INTEGER FP40=2;
    INTEGER FP41=3;
    INTEGER FP42=4;
    INTEGER FP50=5;
    INTEGER FP51=6;
    INTEGER FP60=7;
    INTEGER FP61=8;
    INTEGER FP62=9;
    INTEGER FP84=11;
    INTEGER FP85=12;
    INTEGER FP86=13;
    INTEGER FP90=14;
    INTEGER FP91=15;
    INTEGER UNKNOWN=127;
    INTEGER UNSPECIFIED=0;
    INTEGER QN132=1;
    INTEGER VQ100=2;
    INTEGER TQ144=3;
    INTEGER PQ208=4;
    INTEGER FG144=5;
    INTEGER FG256=6;
    INTEGER FG484=7;
    INTEGER FG676=8;
    INTEGER FG896=9;
    INTEGER QN108=10;
    INTEGER QN180=11;
    INTEGER TQ100=12;
    INTEGER CQ208=13;
    INTEGER FG1152=14;
    INTEGER BG456=15;
    INTEGER UNDEFINED=63;
    INTEGER GRADE_UNSPEC=0;
    INTEGER GRADE_1=1;
    INTEGER GRADE_2=2;
    INTEGER GRADE_3=3;
    INTEGER GRADE_F=4;
    INTEGER GRADE_STD=5;
    INTEGER GRADE_4=6;
    INTEGER GRADE_UNDEF=7;
ENDDATA;

DATA PARAMETERS;
    INTEGER FREQ =4;
ENDDATA;

DATA GV;
    INTEGER ULOPT1_BITLOCATION =11;
    INTEGER ULOPT0_BITLOCATION =10;
    INTEGER ULUWE_BITLOCATION =9;
    INTEGER ULARE_BITLOCATION =8;
    INTEGER ULUPC_BITLOCATION =7;
    INTEGER ULUFE_BITLOCATION =6;
    INTEGER ULUFP_BITLOCATION =5;
    INTEGER ULUFJ_BITLOCATION =4;
    INTEGER ULFLR_BITLOCATION =3;
    INTEGER ULULR_BITLOCATION =2;
    INTEGER ULAWE_BITLOCATION =1;
    INTEGER ULARD_BITLOCATION =0;
    BOOLEAN BUFF128[128];
    BOOLEAN BUFF32[32];
    INTEGER I;
    INTEGER J;
    INTEGER TEMP;
    INTEGER SDNUMBER;
    INTEGER ROWNUMBER;
    INTEGER DATAINDEX =0;
    INTEGER FROMROWNUMBER =1;
    INTEGER AESBLOCK;
    BOOLEAN ID[32];
    BOOLEAN PASS = 1;
    BOOLEAN FADDR[3];
    INTEGER STATUS =0;
    BOOLEAN SILSIG[32] = $00000000;
    BOOLEAN ISC_CONFIG_RESULT[18];
    BOOLEAN VERIFYEOL[2];
    BOOLEAN COMBERASESELECT[23];
    BOOLEAN SECKEY_OK = 1;
    BOOLEAN SECREG[44];
    BOOLEAN ULUWE = 0;
    BOOLEAN ULARE = 0;
    BOOLEAN ULUPC = 0;
    BOOLEAN ULUFE = 0;
    BOOLEAN ULUFP = 0;
    BOOLEAN ULUFJ = 0;
    BOOLEAN ULFLR = 0;
    BOOLEAN ULULR = 0;
    BOOLEAN ULAWE = 0;
    BOOLEAN ULARD = 0;
    BOOLEAN ULOPT[2];
    BOOLEAN SUROWCHECKSUM[16];
    INTEGER SUROWCYCLECOUNT =0;
    INTEGER ACT_UROW_CYCLE_COUNT =0;
    BOOLEAN ACT_UROW_DESIGN_NAME[70] = $0102040810204366b1;
    BOOLEAN SUROWDESIGNNAME[70];
    BOOLEAN SUROWPROGMETHOD[3];
    BOOLEAN ACT_UROW_ALGO_VERSION[7] = $14;
    BOOLEAN SUROWALGOVERSION[7];
    BOOLEAN SUROW_PKG_TYPE[6];
    BOOLEAN ACT_UROW_SW_VERSION[7];
    BOOLEAN SUROW_SW_VERSION[7];
    INTEGER PLAYERVERSIONVARIABLE =0;
    INTEGER SCULPTORMAJORBASE =4;
    INTEGER SCULPTORMINORBASE =50;
    INTEGER PLAYER_VERSION_VARIABLE =0;
    INTEGER SCULPTOR_MAJOR_BASE =4;
    INTEGER SCULPTOR_MINOR_BASE =50;
    BOOLEAN ACT_UROW_PROGRAM_SW[4] = $2;
    BOOLEAN SUROWPROGRAMSW[4];
    BOOLEAN SUROW_SPEED_GRADE[3];
    BOOLEAN SUROW_SRAM_DISTURB[1];
    BOOLEAN ISERASEONLY = 0;
    BOOLEAN ISRESTOREDESIGN = 0;
    BOOLEAN FLAGDISPLAYCYC = 1;
    BOOLEAN ISPRGARRAY = 0;
    BOOLEAN BSRPATTERN[288] = $9249249249249249249249249249249249249249249249249
        24924924924924924924924;
    BOOLEAN SAMPLEMASK[288] = $0000000000000000000000000000000000000000000000000
        00000000000000000000000;
    BOOLEAN BSR[288];
    BOOLEAN SAMPLE_DEVICE[288];
    BOOLEAN RLOCK[416] = $7fffffcffffffbfffffeffffffbfffffefffffffffffffffffffff
        ffffffffffffffffffffffffffffffffffffffffffffffffff;
    BOOLEAN ARRAYRONLY = 1;
    BOOLEAN CHKARRAY = 0;
    BOOLEAN FROMRONLY = 1;
    BOOLEAN CHKFROM = 0;
    BOOLEAN CHKNVM = 0;
    BOOLEAN CHKSEC = 1;
    BOOLEAN PERMLOCK = 0;
    INTEGER HEX[16] = 70,69,68,67,66,65,57,56,55,54,53,52,51,50,49,48;
    INTEGER NUMBEROFFROMROWS =8;
    BOOLEAN INITIALIZE_DATA[5] = $00;
    INTEGER SDTILE;
    INTEGER NUMBEROFSDTILES =2;
    INTEGER NUMBEROFMAPROWS =625;
    INTEGER IDREV;
    INTEGER IDFAB;
    INTEGER BM7DEVICE =0;
    INTEGER BM1DEVICE =0;
    BOOLEAN M1BUFF[128] = $acdd6548ccb488863e291eb18fe95077;
    BOOLEAN M7BUFF[128] = $e137623a2eeee91126015f3f73664945;
    BOOLEAN IDCODEVALUE[32] = $049011cf;
    BOOLEAN IDMASK[32] = $07ffffff;
    INTEGER SECKEYCHK =0;
    INTEGER DESIGNPKGTYPE =2;
    BOOLEAN ACT_UROW_PROG_METHOD[3] = $1;
    INTEGER LABEL_SEPARATOR =0;
    INTEGER ROWITERATION =100;
    INTEGER PAGEITERATION =100;
    INTEGER PERCENT_UPDATE;
    INTEGER DIFFERENCE;
    INTEGER UNIQUEEXITCODE =0;
ENDDATA;

DATA ECCCHECK;
    INTEGER SYNDROMETABLE[256] = -1,97,98,-1,99,-1,-1,100,101,-1,-1,31,-1,102,30
        ,-1,103,-1,-1,29,-1,28,27,-1,-1,26,25,-1,24,-1,-1,104,105,-1,-1,7,-1,6,5
        ,-1,
    -1,4,3,-1,2,-1,-1,106,-1,0,107,-1,1,-1,-1,108,109,-1,-1,110,-1,111,112,-1,86
        ,-1,-1,87,-1,88,89,-1,-1,90,47,-1,91,-1,-1,46,
    -1,92,45,-1,44,-1,-1,43,42,-1,-1,41,-1,40,93,-1,-1,64,55,-1,54,-1,-1,53,52,-1
        ,-1,51,-1,50,65,-1,48,-1,-1,66,-1,49,67,-1,
    -1,68,69,-1,70,-1,-1,-1,71,-1,-1,72,-1,73,74,-1,-1,75,63,-1,76,-1,-1,62,-1,77
        ,61,-1,60,-1,-1,59,58,-1,-1,57,-1,56,78,-1,
    -1,79,39,-1,38,-1,-1,37,36,-1,-1,35,-1,34,80,-1,32,-1,-1,81,-1,33,82,-1,-1,83
        ,84,-1,85,-1,-1,-1,-1,113,114,-1,115,-1,-1,116,
    117,-1,-1,15,-1,118,14,-1,119,-1,-1,13,-1,12,11,-1,-1,10,9,-1,8,-1,-1,-1,94,-1
        ,-1,23,-1,22,21,-1,-1,20,19,-1,18,-1,-1,-1,
    -1,16,95,-1,17,-1,-1,-1,96,-1,-1,-1,-1,-1,-1,-99;
    BOOLEAN ECCSTR0[120] = $ad2aadea7554eab4d1b4d14b2e4b2e;
    BOOLEAN ECCSTR1[120] = $eaa2eb5d68bad11557155715571557;
    BOOLEAN ECCSTR2[120] = $a66aa7d4daa9b5a699a699a699a699;
    BOOLEAN ECCSTR3[120] = $9e1a9ed3c6a78d38e338e338e338e3;
    BOOLEAN ECCSTR4[120] = $7e067e4fc19f83c0fcc0fcc0fcc0fc;
    BOOLEAN ECCSTR5[120] = $fe01fe3fc07f80ff00ff00ff00ff00;
    BOOLEAN ECCSTR6[120] = $01fffe003fff80ff0000ffff0000ff;
    BOOLEAN ECCSTR7[120] = $01fffe3fc0007f00ffff00ff0000ff;
    BOOLEAN TEMPECCSTR[120];
    BOOLEAN TEMPECC[8];
    BOOLEAN TEMPPARITY;
    BOOLEAN TEMPDATA[120];
    INTEGER ISMARTERASE;
    INTEGER ISEITERATION =10;
ENDDATA;

DATA BITSTREAM;
    BOOLEAN UROW[128];
    BOOLEAN UROW_MASK[128] = $fffffffffffffffffffffffffe01ffc0;
    BOOLEAN DATASTREAM[260000] = @qx7008jjjb0000u@@RMIIIaGQRrs0000ytt@la499fDRRY
        0000Or_@@Yaaamssc40000mj@@_899H6000W99HI299II0W15Waaa4aaa41000010008IIgX
        0P000rS0C9992000LGW000W1EGIIIo460200e6Hq526W1QRRR19RRJaaa450000ssMjPssa4
        89HIE000WQpssQ9sMI49991rm0cajbGIIIM71IIIISR99HjjjLdj99oaa49vIIiDRRrsQJYq
        sJYaaChIoMDRRR7QJIx8999XjbaLssscjsc4j1000maa89G00000Gos100009IIIa0000Wb4
        0_J60100Gc9bqFG0aaa4100G4G29tB3Wa000009HII0000W41002@J1z81Wa0Wg150I0GM3A
        uKsc4GIIY400WkX08fjanP10II000050jDHYaaaHPG000W0ORIa8991H200ORRR3stMYC999
        o@@@_rssiTjijp4Wy@@LRRRhsKRMjD99IIysz@@sgjjxcRRxYaaa8R@@Vssssyss_RRRRpUB
        RhsjjDRdzjQxssijvsgj4tcjjzlljDRsssUIsssPRRRB@RRpjjjDZaiDR000080060OK3SOA
        Lm0OdEH3t82Y6NC0wgPg0000mBW2A00060J0G000W10GQ0Z1G69XDgECSWQ8QGGYuYW6A3WC
        c6D4qE9QWc1W70200C0SGN71V4NK1Imr088000o9efTmWD686SyeJOYnW3A8ef6O1GG003QC
        KYuGEn5f144eH2420WH5DYWaPt0aO75oZqgJmbXE22Q_9d8hQWDGIIIYaaa4A9992IIIabaa
        8H99HIGIYaia499IYaaW4988Ar08W0bai6u09GIIf1EG8999D8XEXBww981njaDKaKHZW6Po
        aaaiKH28f993Qq0f999I2IIPBa8r171DsG400GE1NC0008RRRpK000ejjDRP000assijB000
        ORpss100GAxGd58QRRpM0008ejDRx800IosijTmgjj1YaaauyF2GI2ePRRW4991WjjjJaaa4
        ijj9Xaaa8NssQt91QRRJ1899Gijjj601msssCJII2KRRpE899IXjDRHaa89psijHJYa4Mcjb
        SYaa4IsssEIIIP9RRBF8W0jj9HWa428000ucaa4A000GIIIa2000e99HI0000ic4992000ua
        Ob50acaaj0008IIIa44000A9HI2yx@@14999f@@@Iaaa4w@@@9IIIIy@@t5899I_@V@399II
        s@zldW890_t@lRYaa46@@R7IIIIK000eqsscG0000RRRsD0000jjPRH000uqcjj2000eMjjj
        G20G2rssa10000RRRh2008IjjjI10060iosFI604J3BQ600odCBg1KG8iDY6C3808W22maWe
        en0W8000eWG4f1Ce605j5e8sG38002g1OH603gmIHWW6EorGyeFwboGC06QBKI22Gg10oc3Y
        Ig8KDWc60GpIc3M5ymwa32FInM08I2qGDW4ot4He1L2EiZ0O0WGTqKEm4l8eG5ADi1014000
        Qb8YABI8S2AG000WabaK999P1E78P99f072099PbZ31oIoIonH1oIYIcaaW8P9P5g31MIII4
        aaea6W2WaaW2rv0P99DIGIKI3G1IGIGf1G0GI0WCCw0G0GGnBP4E1E7HSnI0p4eHI9bKmWY4
        a6WA89191IIIMg01GIIoQDQYmZU01P99IGWaGgA1O99PQ0408999ye3AMnXS269y83C1404U
        41j6P07G0mmZ80200WijjD3300r0G0200WQ080000fsssEqoss0IIIaQRR7U41ORRJ1f990i
        XjHd4a48ijDRZaa89dsijHGYa4Ipss29IIIamZEmjjDYaa4OsscEIGIIPBR3X999Hkbj5Zac
        49ijjQxWa89KsMXK1ajjjXcaa8tssk2920G0GuaaaCy884bqa4Uq1G400g1W08000IIII400
        00g99H2_xltXa499zx_tIIaa4@v@x5HII2kx@t39899k@@@1999Hc@@tdaa49k@V@RIIa4_@
        z@78T7G1gjjj90008msscT1004GRRsU0400kD3F2Xy99O0g200JRNX41WIRRr200C0mo4W00
        omOaKFS8HCJI3OYzJ88Q07_SXXQ0E8ce76Vv12000b0yGq04a6W2v4anQ1X4So4f1SGuHeK3
        08V2OGuHJ4DW2D2SnU1Q8400OcADo9OYHPE0H00GuHna6m5HkqnmfviPo3l5Om90JqC3E020
        0EPggeQquRW92S2jO8QO7h9YzhcG38AOhJU_H1aaaaj6bG1E7aNK2iiaa89295gp22GII24y
        3PP99fGkGmZH4UK9L7mHs274mW1r0eGz4h5qmEfRum94I4UK5PBWXKf9fQ080e99P5IN4yOC
        X68IbCFG00OenH32Fo02GRRss1404ajPRxm080WTuH902000jjjD320WmZAGRJ34988Njjj1
        aaq4qssm2II2YOJRPuH4mqcs62IGYSQBR6998IeijPBWa89rqcjT2Yca8RMMs9IIGWPR3x89
        9DbDjbDaaa6fMsUCJIIWuo6gj3JYaGPBts19IIgeQRRK899vWjjDobaa0020WmZAWWWa499D
        WMZ80D100GWIoW7LW0Wa499b000GQaaaW400GHIIIW@_lVuH4u@k_49991@_lUcaaW0@VFzH
        IIoaxVEuH3q@da899Mt@@RWaa46_x@7PXR0QRRR20080ijjH7W0W0sscfL000WQVssA0W0WQ
        2FA1O000OQRRL8004Uq1jXYsAXKay55v2bmc99CDZ5LDAnO09K4122000o3OYZ2Q8i07EAmW
        q0Q84a9I38XQ0Oet07GG004peCf10HD3l010W84aGGG00rqa8HBCHbBQKXm52008EPGXW7P9
        xdZE7W01G001qqH739SL01xb61810WPAc011GG4gs4jW1t0emZ0CCEn2W400g101W00498Oo
        l27i@J3L012G00WE1Y8D0FQ6uWb6G8r15oDq0600GrDun0NJ4Q05hCOmo2Oafu1XAOGn_AL1
        G20A002r1b_1W8q0Bos_WGTkGB99BKI2I4baa8B91Bmf0QIIMvuOWoIIoSS8G2IIcaaa4g99
        9YGII2r944aaar0S04aa4A999YIIIa1aa4Uq67fOGD0DaNH3X8k0404WBFvuYXAM18XL5Ce6
        9NsF1a2FIejY82RXZaA_8eX7e999HMSIAR19KMII2a4aiX18aXaW4q01A991h1OYq080D99P
        NaAGD999yeFA1eWGGMeK12A11130021FIGuH7040eLRRx1002sW790C4aDRRR8044qijjjG1
        20WssscX10GuH70999HYjjLmZ6qu81jLNWWamIDjDIaWaSncc61IJIGQ3BB8988gebjwWaa8
        1ssgiHIoa0RRRr4WKRRpsC91IojDPRWa81XXPOQ7811XYDii3caaKWMMsGHQQa9xQF491000
        0yIII21000e999J10WW7DW0G9PuH5uyaa4Y080GQIow79GIIpZ004aW7Benn28@@@x3II24@
        @Ter40y@xjr82S@xx32IIYC@rjF199Iq_z_ta488S@nxFGAun3ej800G0RBuH22jc05000WR
        RRrAAGWWQRps24800CDRRd4WW0ciff51W0WosssoH8mSCY9hHxH9Ot4RH2G0106AmZJQOOi0
        4wWYW10G0I00mM7AaLm1@QmGQ0Fq9G1f1eGm1B4CyHl9bn_sdio0320G0QeZ41040f1Onm3L
        0O08eh9BM99YZ0Ie607w6eXZJyG008G_3LajW87e51G80WaNAfNY4WW00yKL9he3pk4I0G08
        O319w7uW8Yq8JFdG800qGFI2000o2sb4US8512ILmXG4N8_uFg8GXIUM8D06EMOX9gUe6W3M
        VmYm9Y9qW5oCWWG3E8ye4EmuWG08u2W3OI2I6yO2eB91pnX09999nmG0IIJoQ0A0W4aKmZ9O
        I0oAye8819A58e9vkVJD06yWr68000YEWW95E8whAALW30200f1yH8yebXX4400IobY4GIMI
        1F_G2s78919h_HJ2UiaajGe9Z52UaX67BejQ3W0404QD10C0e3jk03GRRssG001ajPRxijjw
        2Mdc0III2QRRR1999HjjjjjQ2ORRP7QD1OJRZ89988ibfDy82ijfTYaaamssscJIIIGRRRX7
        TmW06mC99HYBRgqE81I2XDOO7c09fogiiHZqWahsMs8HQI2DEYGer8qMz11FY0DH0000IJaa
        K0W01fHQI28y83y@@@7Ua1DEIW@@@@sgDmF99PuH40II2Yi@zTuH4u@xrd5989u_xxmZ8ejQ
        8msssg0000KRRhM1026KVRsMe012WfDYG1OQJR3jk0qs20vKdPeIwCtYDDPiIQ0qC0WR1dqp
        9Jhar8DRlfHmZqK303fHam405KTW6v6IGqAGKZC9f1Omj37bJm6POmowEFSIb4H3CnI07CPW
        BPiBH0DPbKH730WY100WaAM9EXIg1uYB9E8TZO2jcXGTYe6W8099Prc372aaa2FIgeFveR8c
        2FwhqE79@BAofk4IGMIr0a0899XGhpQ0092Fw20010r0GGuH6K3G3X7nHD064U41Iejbh1e0
        RPRdX7rHD04819XcjijZaWaKsMsst2WGuHXK303aca0g1W0cam@X7bX@V@@Q08mV@@9IQIYQ
        08G2I2l@@@39199X7jHD0D020OpssM0010ARJRBtx8sWNkifn7XmdOuHQczp7v4KnUD8KJ3D
        X7boOE84GJOfFvJu47EKGI9LiK8L05eXT1gxKu4B5U4Aqa4b8991H2IoAqQG2Foim9KBib@o
        MWcmZ6i6WC2FIaQ0a8y8Fg1GY1188yeLg10XmZue6WAgkcWmZGf6W52UKpQjFAy8lJG8ZW7x
        AJcV2e9pWjcy@BNE5eY0QKEy8y3rPemZ_Fye@3Fw@mZCEun@3jUlmZ_F6c9p@YZE1m0G0GGu
        H@7UaqIGIK2Fo5G0G0X7zVuH@7Uq@X7zVuH@7Uq@X7fR0Dc7Uq@1F_VuH@7U4FS0002FA6Yj
        jjX7zVhHvdxXWX7zVuH@7y89T28J8yvaiz51qWrA4T4Uq@1F64008WeFjfl2R01004Uqo099
        13FwcC088un@3Fw@W7@Fye@3Fw@W7@Fun@3Uy@W7@Fy8bQSyWmZQfnn32Fw@yYskM313Fw@m
        Z_lL26x48gw7BBye@3Fgjm9_i6Wi08004UKCaWai2Q81Waaa8898HKII6U4C4040QBm4ijjj
        00000y@@x1IIY4QRhs00000_@_@Xa899D0QR00000l0_@G4Wa4M0sMs0W00y@020I200008I
        IIYGIIIv070aaa4Waa4100W108G40a4W0WaICE09099818fQ080999PJ6A0999fbW50a41i1
        G2I0IIo9e1msss4899B7W0QRRRGRRR5aaaiE01Q0QRG3GR3a0ai602i0ijW5WjTTW3WaaaaJ
        01sss6qsssGIII28999WjjDBijjQ918HI4089m2Wj5M0ijG0Wa090IIe1GR3P0QRum03Y7G1
        8999b4e0I0IoQ0K020IoW2G0GIIY400Gk24010000999o00000890G00g1010a00r0eWORRx
        u4K0QRRh0999210030GWQIQx3380G2000000i8jjY4Wa80a0yU01usssi999Hi@@t@sscjZj
        DRRIIaam@z@lRYssmYajb9IIISVo@@C9jDLFPRpaaa4ndqlFqsMjrssiDRRrsQRpssjLRRdD
        RRxKjjjnijjDj9jjL3018fjnijjjpaqsKssscRJQR6RRRs0002E1d8LGBy8qIG8pW6_FeX@3
        Qu@W6uE4nr2Qu@W6c6WW0Gkw7010400010W0020WW0r0q1;
    INTEGER CHECKSUM =29315;
ENDDATA;


PROCEDURE DO_EXIT USES GV;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $81;
    WAIT IDLE, 250 USEC;
    IRSCAN 8, $81, CAPTURE BUFF128[7..0];
    IF ( ! (BUFF128[2]==0) ) THEN GOTO Label_0;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $07;
    WAIT IDLE, 1 CYCLES;
    WAIT IDLE, 200 USEC;
    Label_0:
    IRSCAN 8, $ff;
    WAIT IDLE, 200 USEC;
    WAIT RESET, 3 CYCLES;
    EXIT STATUS;
ENDPROC;

PROCEDURE DO_READ_SECURITY USES GV;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $a4;
    WAIT IDLE, 3 CYCLES;
    DRSCAN 44, $00000000000, CAPTURE SECREG[];
    ULUWE = SECREG[ULUWE_BITLOCATION];
    ULARE = SECREG[ULARE_BITLOCATION];
    ULUPC = SECREG[ULUPC_BITLOCATION];
    ULUFE = SECREG[ULUFE_BITLOCATION];
    ULUFP = SECREG[ULUFP_BITLOCATION];
    ULUFJ = SECREG[ULUFJ_BITLOCATION];
    ULFLR = SECREG[ULFLR_BITLOCATION];
    ULULR = SECREG[ULULR_BITLOCATION];
    ULAWE = SECREG[ULAWE_BITLOCATION];
    ULARD = SECREG[ULARD_BITLOCATION];
    ULOPT[1] = SECREG[ULOPT1_BITLOCATION];
    ULOPT[0] = SECREG[ULOPT0_BITLOCATION];
ENDPROC;

PROCEDURE DO_OUTPUT_SECURITY USES GV;
    PRINT "Security Settings :";
    IF ( ! (ULUFP==1) ) THEN GOTO Label_1;
    PRINT "FlashROM Write/Erase protected by pass key.";
    Label_1:
    IF ( ! (ULUFJ==1) ) THEN GOTO Label_2;
    PRINT "FlashROM Read protected by pass key.";
    Label_2:
    IF ( ! (ULAWE==1) ) THEN GOTO Label_3;
    PRINT "Array Write/Erase protected by pass key.";
    Label_3:
    IF ( ! (ULARD==1) ) THEN GOTO Label_4;
    PRINT "Array Verify protected by pass key.";
    Label_4:
    IF ( ! (ULUFE==1) ) THEN GOTO Label_5;
    PRINT "Encrypted FlashROM Programming Enabled.";
    Label_5:
    IF ( ! (ULARE==1) ) THEN GOTO Label_6;
    PRINT "Encrypted FPGA Array Programming Enabled.";
    Label_6:
    PRINT "=========================================";
ENDPROC;

PROCEDURE DO_QUERY_SECURITY USES DO_READ_SECURITY,DO_OUTPUT_SECURITY;
    CALL DO_READ_SECURITY;
    CALL DO_OUTPUT_SECURITY;
ENDPROC;

PROCEDURE READ_UROW USES BITSTREAM,GV;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $c0;
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $a8;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 165 USEC;
    DRSCAN 128, $00000000000000000000000000000000, CAPTURE UROW[];
    SUROWALGOVERSION[6..0] = $00;
    IF ( ! ( (UROW[5]==0)&&(UROW[0]==1)) ) THEN GOTO Label_7;
    SUROWALGOVERSION[5..4] = UROW[24..23];
    Label_7:
    IF ( ! ( (UROW[5]==1)&&(UROW[0]==0)) ) THEN GOTO Label_8;
    SUROWALGOVERSION[5..4] = UROW[24..23];
    SUROWALGOVERSION[6] = 1;
    Label_8:
    SUROWCHECKSUM[15..0] = UROW[127..112];
    SUROWCYCLECOUNT = INT(UROW[111..102]);
    SUROWDESIGNNAME[69..0] = UROW[101..32];
    SUROWPROGMETHOD[2..0] = UROW[31..29];
    SUROWALGOVERSION[3..0] = UROW[28..25];
    SUROW_PKG_TYPE[5..0] = UROW[22..17];
    SUROW_SW_VERSION[6..0] = UROW[16..10];
    SUROWPROGRAMSW[3..0] = UROW[9..6];
    SUROW_SRAM_DISTURB[0] = UROW[4];
    SUROW_SPEED_GRADE[2..0] = UROW[3..1];
    ACT_UROW_CYCLE_COUNT = SUROWCYCLECOUNT;
ENDPROC;

PROCEDURE FIX_INT_ARRAYS USES GV,ECCCHECK;
    IF ( ! (HEX[0]!=48) ) THEN GOTO Label_9;
    FOR I = 0 TO 7;
        TEMP = HEX[I];
        HEX[I] = HEX[(15-I)];
        HEX[(15-I)] = TEMP;
    NEXT I;
    FOR I = 0 TO 127;
        TEMP = SYNDROMETABLE[I];
        SYNDROMETABLE[I] = SYNDROMETABLE[(255-I)];
        SYNDROMETABLE[(255-I)] = TEMP;
    NEXT I;
    Label_9:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DISP_CHKSUM_DESIGN USES GV,FIX_INT_ARRAYS;
    CALL FIX_INT_ARRAYS;
    IF ( ! (INT(SUROWCHECKSUM[15..0])==65535) ) THEN GOTO Label_10;
    PRINT "CHECKSUM: ";
    Label_10:
    IF ( ! (INT(SUROWCHECKSUM[15..0])!=65535) ) THEN GOTO Label_11;
    PRINT "CHECKSUM: ",CHR$(HEX[INT(SUROWCHECKSUM[15..12])]),CHR$(HEX[INT(SUROWCHECKSUM[11..8])])
        ,CHR$(HEX[INT(SUROWCHECKSUM[7..4])]),CHR$(HEX[INT(SUROWCHECKSUM[3..0])]);
    Label_11:
    IF ( ! ( ( (INT(SUROWDESIGNNAME[0..30])==2147483647)&&(INT(SUROWDESIGNNAME[31..61])==2147483647))&&(INT(SUROWDESIGNNAME[62..69])==255)) ) THEN GOTO Label_12;
    PRINT "Design Name: ";
    Label_12:
    IF ( ! ( ( (INT(SUROWDESIGNNAME[0..30])!=2147483647)||(INT(SUROWDESIGNNAME[31..61])!=2147483647))||(INT(SUROWDESIGNNAME[62..69])!=255)) ) THEN GOTO Label_13;
    PRINT "Design Name: ",CHR$(INT(SUROWDESIGNNAME[63..69])),CHR$(INT(SUROWDESIGNNAME[56..62]))
        ,CHR$(INT(SUROWDESIGNNAME[49..55])),CHR$(INT(SUROWDESIGNNAME[42..48])),CHR$(INT(SUROWDESIGNNAME[35..41]))
        ,CHR$(INT(SUROWDESIGNNAME[28..34])),CHR$(INT(SUROWDESIGNNAME[21..27])),CHR$(INT(SUROWDESIGNNAME[14..20]))
        ,CHR$(INT(SUROWDESIGNNAME[7..13])),CHR$(INT(SUROWDESIGNNAME[0..6]));
    Label_13:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DISPLAY_UROW USES BITSTREAM,CONSTBLOCK,GV,DISP_CHKSUM_DESIGN;
    EXPORT "USER_ROW", UROW[127..0];
    PRINT "User information: ";
    CALL DISP_CHKSUM_DESIGN;
    IF ( ! (FLAGDISPLAYCYC==1) ) THEN GOTO Label_14;
    PRINT "CYCLE COUNT: ",SUROWCYCLECOUNT;
    Label_14:
    INTEGER TMPINT =INT(SUROWPROGMETHOD[]);
    INTEGER TMPINT2 =0;
    INTEGER TMPINT3 =0;
    INTEGER TMPINT4 =0;
    INTEGER TMPINT5 =0;
    IF ( ! (TMPINT==IEEE1532) ) THEN GOTO Label_15;
    PRINT "Programming Method: IEEE1532";
    Label_15:
    IF ( ! (TMPINT==STAPL) ) THEN GOTO Label_16;
    PRINT "Programming Method: STAPL";
    Label_16:
    IF ( ! (TMPINT==DIRECTC) ) THEN GOTO Label_17;
    PRINT "Programming Method: DirectC";
    Label_17:
    IF ( ! (TMPINT==PDB) ) THEN GOTO Label_18;
    PRINT "Programming Method: PDB";
    Label_18:
    IF ( ! (TMPINT==SVF) ) THEN GOTO Label_19;
    PRINT "Programming Method: SVF";
    Label_19:
    IF ( ! (TMPINT==IAP) ) THEN GOTO NOT_IAP;
    PRINT "Progarmming Method: IAP";
    NOT_IAP:
    PRINT "Algorithm Version: ",INT(SUROWALGOVERSION[6..0]);
    TMPINT = INT(SUROW_PKG_TYPE[]);
    IF ( ! (TMPINT==UNSPECIFIED) ) THEN GOTO Label_20;
    PRINT "Device Package Type: package information not available from device";
    Label_20:
    IF ( ! (TMPINT==QN132) ) THEN GOTO Label_21;
    PRINT "Device Package Type: QN132/QNG132";
    Label_21:
    IF ( ! (TMPINT==VQ100) ) THEN GOTO Label_22;
    PRINT "Device Package Type: VQ100/VQG100";
    Label_22:
    IF ( ! (TMPINT==TQ144) ) THEN GOTO Label_23;
    PRINT "Device Package Type: TQ144/TQG144";
    Label_23:
    IF ( ! (TMPINT==PQ208) ) THEN GOTO Label_24;
    PRINT "Device Package Type: PQ208/PQG208";
    Label_24:
    IF ( ! (TMPINT==FG144) ) THEN GOTO Label_25;
    PRINT "Device Package Type: FG144/FGG144";
    Label_25:
    IF ( ! (TMPINT==FG256) ) THEN GOTO Label_26;
    PRINT "Device Package Type: FG256/FGG256";
    Label_26:
    IF ( ! (TMPINT==FG484) ) THEN GOTO Label_27;
    PRINT "Device Package Type: FG484/FGG484";
    Label_27:
    IF ( ! (TMPINT==FG676) ) THEN GOTO Label_28;
    PRINT "Device Package Type: FG676/FGG676";
    Label_28:
    IF ( ! (TMPINT==FG896) ) THEN GOTO Label_29;
    PRINT "Device Package Type: FG896/FGG896";
    Label_29:
    IF ( ! (TMPINT==QN108) ) THEN GOTO Label_30;
    PRINT "Device Package Type: QN108/QNG108";
    Label_30:
    IF ( ! (TMPINT==QN180) ) THEN GOTO Label_31;
    PRINT "Device Package Type: QN180/QNG180";
    Label_31:
    IF ( ! (TMPINT==TQ100) ) THEN GOTO Label_32;
    PRINT "Device Package Type: TQ100/TQG100";
    Label_32:
    IF ( ! (TMPINT==CQ208) ) THEN GOTO Label_33;
    PRINT "Device Package Type: CQ208/CQG208";
    Label_33:
    IF ( ! (TMPINT==FG1152) ) THEN GOTO Label_34;
    PRINT "Device Package Type: FG1152/FGG1152";
    Label_34:
    IF ( ! (TMPINT==BG456) ) THEN GOTO Label_35;
    PRINT "Device Package Type: BG456/BGG456";
    Label_35:
    IF ( ! (TMPINT==UNDEFINED) ) THEN GOTO Label_36;
    PRINT "Device Package Type: package information not available from device";
    Label_36:
    TMPINT = INT(SUROW_SPEED_GRADE[]);
    IF ( ! (TMPINT==GRADE_UNSPEC) ) THEN GOTO Label_37;
    PRINT "Device Speed Grade: speed grade information not available from device";
    Label_37:
    IF ( ! (TMPINT==GRADE_1) ) THEN GOTO Label_38;
    PRINT "Device Speed Grade: -1";
    Label_38:
    IF ( ! (TMPINT==GRADE_2) ) THEN GOTO Label_39;
    PRINT "Device Speed Grade: -2";
    Label_39:
    IF ( ! (TMPINT==GRADE_3) ) THEN GOTO Label_40;
    PRINT "Device Speed Grade: -3";
    Label_40:
    IF ( ! (TMPINT==GRADE_F) ) THEN GOTO Label_41;
    PRINT "Device Speed Grade: -F";
    Label_41:
    IF ( ! (TMPINT==GRADE_STD) ) THEN GOTO Label_42;
    PRINT "Device Speed Grade: STD";
    Label_42:
    IF ( ! (TMPINT==GRADE_4) ) THEN GOTO Label_43;
    PRINT "Device Speed Grade: -4";
    Label_43:
    IF ( ! (TMPINT==GRADE_UNDEF) ) THEN GOTO Label_44;
    PRINT "Device Speed Grade: speed grade information not available from device";
    Label_44:
    TMPINT = INT(SUROWPROGRAMSW[]);
    IF ( ! (TMPINT==FP) ) THEN GOTO Label_45;
    PRINT "Programmer: FlashPro";
    Label_45:
    IF ( ! (TMPINT==FPLITE) ) THEN GOTO Label_46;
    PRINT "Programmer: FlashPro Lite";
    Label_46:
    IF ( ! (TMPINT==FP3) ) THEN GOTO Label_47;
    PRINT "Programmer: FlashPro3";
    Label_47:
    IF ( ! (TMPINT==FP4) ) THEN GOTO Label_48;
    PRINT "Programmer: FlashPro4";
    Label_48:
    IF ( ! (TMPINT==SCULPTW) ) THEN GOTO Label_49;
    PRINT "Programmer: SiliconSculptor II";
    Label_49:
    IF ( ! (TMPINT==BPW) ) THEN GOTO Label_50;
    PRINT "Programmer: BP Programmer";
    Label_50:
    IF ( ! (TMPINT==DIRECTCP) ) THEN GOTO Label_51;
    PRINT "Programmer: DirectC";
    Label_51:
    IF ( ! (TMPINT==STP) ) THEN GOTO Label_52;
    PRINT "Programmer: Actel JAM Player";
    Label_52:
    IF ( ! ( ( ( (TMPINT==FP)||(TMPINT==FPLITE))||(TMPINT==FP3))||(TMPINT==FP4)) ) THEN GOTO Label_68;
    TMPINT2 = INT(SUROW_SW_VERSION[]);
    IF ( ! (TMPINT2==FP33) ) THEN GOTO Label_53;
    PRINT "Software: FlashPro v3.3";
    Label_53:
    IF ( ! (TMPINT2==FP34) ) THEN GOTO Label_54;
    PRINT "Software: FlashPro v3.4";
    Label_54:
    IF ( ! (TMPINT2==FP40) ) THEN GOTO Label_55;
    PRINT "Software: FlashPro v4.0";
    Label_55:
    IF ( ! (TMPINT2==FP41) ) THEN GOTO Label_56;
    PRINT "Software: FlashPro v4.1";
    Label_56:
    IF ( ! (TMPINT2==FP42) ) THEN GOTO Label_57;
    PRINT "Software: FlashPro v4.2";
    Label_57:
    IF ( ! (TMPINT2==FP50) ) THEN GOTO Label_58;
    PRINT "Software: FlashPro v5.0";
    Label_58:
    IF ( ! (TMPINT2==FP51) ) THEN GOTO Label_59;
    PRINT "Software: FlashPro v5.1";
    Label_59:
    IF ( ! (TMPINT2==FP60) ) THEN GOTO Label_60;
    PRINT "Software: FlashPro v6.0";
    Label_60:
    IF ( ! (TMPINT2==FP61) ) THEN GOTO Label_61;
    PRINT "Software: FlashPro v6.1";
    Label_61:
    IF ( ! (TMPINT2==FP62) ) THEN GOTO Label_62;
    PRINT "Software: FlashPro v6.2";
    Label_62:
    IF ( ! (TMPINT2==FP84) ) THEN GOTO Label_63;
    PRINT "Software: FlashPro v8.4";
    Label_63:
    IF ( ! (TMPINT2==FP85) ) THEN GOTO Label_64;
    PRINT "Software: FlashPro v8.5";
    Label_64:
    IF ( ! (TMPINT2==FP86) ) THEN GOTO Label_65;
    PRINT "Software: FlashPro v8.6";
    Label_65:
    IF ( ! (TMPINT2==FP90) ) THEN GOTO Label_66;
    PRINT "Software: FlashPro v9.0";
    Label_66:
    IF ( ! (TMPINT2==FP91) ) THEN GOTO NOT_FP91;
    PRINT "Software: FlashPro v9.1";
    NOT_FP91:
    IF ( ! (TMPINT2==UNKNOWN) ) THEN GOTO Label_67;
    PRINT "Software: FlashPro vX.X";
    Label_67:
    LABEL_SEPARATOR = 0;
    Label_68:
    IF ( ! ( (TMPINT==SCULPTW)||(TMPINT==BPW)) ) THEN GOTO Label_72;
    TMPINT3 = (INT(SUROW_SW_VERSION[6..5])+SCULPTORMAJORBASE);
    TMPINT4 = (INT(SUROW_SW_VERSION[4..1])+SCULPTORMINORBASE);
    TMPINT5 = 0;
    IF ( ! (SUROW_SW_VERSION[0]==1) ) THEN GOTO Label_69;
    TMPINT5 = 1;
    Label_69:
    IF ( ! (TMPINT==SCULPTW) ) THEN GOTO Label_70;
    PRINT "Software: Sculptor Win v",TMPINT3,".",TMPINT4,".",TMPINT5;
    Label_70:
    IF ( ! (TMPINT==BPW) ) THEN GOTO Label_71;
    PRINT "Software: BP Win v",TMPINT3,".",TMPINT4,".",TMPINT5;
    Label_71:
    LABEL_SEPARATOR = 0;
    Label_72:
    PRINT "=========================================";
ENDPROC;

PROCEDURE CAL_PARITY USES GV,ECCCHECK;
    INTEGER COUNT =0;
    INTEGER II;
    FOR II = 0 TO 119;
        IF ( ! ( TEMPDATA[II]&&TEMPECCSTR[II]) ) THEN GOTO Label_73;
        COUNT = (COUNT+1);
        Label_73:
        LABEL_SEPARATOR = 0;
    NEXT II;
    IF ( ! ((COUNT%2)==1) ) THEN GOTO Label_74;
    TEMPPARITY = 1;
    Label_74:
    IF ( ! ((COUNT%2)==0) ) THEN GOTO Label_75;
    TEMPPARITY = 0;
    Label_75:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE CAL_ECC USES ECCCHECK,CAL_PARITY;
    TEMPECCSTR[] = ECCSTR0[];
    CALL CAL_PARITY;
    TEMPECC[0] = TEMPPARITY;
    TEMPECCSTR[] = ECCSTR1[];
    CALL CAL_PARITY;
    TEMPECC[1] = TEMPPARITY;
    TEMPECCSTR[] = ECCSTR2[];
    CALL CAL_PARITY;
    TEMPECC[2] = ( !TEMPPARITY);
    TEMPECCSTR[] = ECCSTR3[];
    CALL CAL_PARITY;
    TEMPECC[3] = ( !TEMPPARITY);
    TEMPECCSTR[] = ECCSTR4[];
    CALL CAL_PARITY;
    TEMPECC[4] = TEMPPARITY;
    TEMPECCSTR[] = ECCSTR5[];
    CALL CAL_PARITY;
    TEMPECC[5] = TEMPPARITY;
    TEMPECCSTR[] = ECCSTR6[];
    CALL CAL_PARITY;
    TEMPECC[6] = TEMPPARITY;
    TEMPECCSTR[] = ECCSTR7[];
    CALL CAL_PARITY;
    TEMPECC[7] = TEMPPARITY;
ENDPROC;

PROCEDURE ECC1_CHECKING USES GV,ECCCHECK,CAL_ECC;
    BOOLEAN READECC[8];
    BOOLEAN CALECC[8];
    BOOLEAN SYNDROME[8];
    INTEGER IERRORBIT;
    BOOLEAN BECC1VALUE;
    READECC[7..0] = BUFF128[7..0];
    TEMPDATA[119..0] = BUFF128[127..8];
    CALL CAL_ECC;
    CALECC[] = TEMPECC[];
    FOR I = 0 TO 7;
        IF ( ! (CALECC[I]!=READECC[I]) ) THEN GOTO Label_76;
        SYNDROME[I] = 1;
        Label_76:
        LABEL_SEPARATOR = 0;
    NEXT I;
    IERRORBIT = SYNDROMETABLE[INT(SYNDROME[])];
    IF ( ! ( (IERRORBIT!=-1)&&(IERRORBIT!=-99)) ) THEN GOTO Label_79;
    BECC1VALUE = BUFF128[(8+IERRORBIT)];
    IF ( ! (BECC1VALUE==1) ) THEN GOTO Label_77;
    BUFF128[(8+IERRORBIT)] = 0;
    Label_77:
    IF ( ! (BECC1VALUE==0) ) THEN GOTO Label_78;
    BUFF128[(8+IERRORBIT)] = 1;
    Label_78:
    LABEL_SEPARATOR = 0;
    Label_79:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE READ_F_ROW USES GV,ECC1_CHECKING;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $c0;
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $f9;
    DRSCAN 3, FADDR[];
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $bf;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 165 USEC;
    DRSCAN 128, $00000000000000000000000000000000, CAPTURE BUFF128[];
    CALL ECC1_CHECKING;
ENDPROC;

PROCEDURE DO_DEVICE_INFO USES GV,READ_UROW,DISPLAY_UROW,READ_F_ROW;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $0e;
    WAIT IDLE, 1 CYCLES;
    DRSCAN 32, $00000000, CAPTURE BUFF32[];
    EXPORT "SILSIG", BUFF32[];
    IRSCAN 8, $84, CAPTURE BUFF128[7..0];
    IF ( ! (BUFF128[2]==1) ) THEN GOTO CORE_NOT_ENABLED;
    PRINT "FPGA Array is programmed and enabled.";
    CORE_NOT_ENABLED:
    IF ( ! (BUFF128[2]==0) ) THEN GOTO CORE_ENABLED;
    PRINT "FPGA Array is not enabled.";
    CORE_ENABLED:
    CALL READ_UROW;
    CALL DISPLAY_UROW;
    FADDR[] = $0;
    CALL READ_F_ROW;
    EXPORT "FSN", BUFF128[55..8];
    PRINT "=========================================";
ENDPROC;

PROCEDURE INIT_AES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $dd;
    DRSCAN 128, $00000000000000000000000000000000;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 165 USEC;
ENDPROC;

PROCEDURE DO_VERIFY_DEVICE_INFO USES GV,BITSTREAM,DO_EXIT,DO_READ_SECURITY,READ_UROW
    ,DISP_CHKSUM_DESIGN;
    CALL READ_UROW;
    CALL DISP_CHKSUM_DESIGN;
    CALL DO_READ_SECURITY;
    BUFF32[31..0] = BOOL(CHECKSUM);
    UROW[127..112] = BUFF32[15..0];
    UROW[101..32] = ACT_UROW_DESIGN_NAME[69..0];
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $c0;
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $a8;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 165 USEC;
    DRSCAN 128, $00000000000000000000000000000000,COMPARE UROW[],$ffff003fffffffffffffffff00000000
        ,PASS;
    IF ( ! (PASS==0) ) THEN GOTO UROW_CMP_OK;
    STATUS = -43;
    PRINT "Failed to verify design information.";
    UNIQUEEXITCODE = 32772;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    UROW_CMP_OK:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE READ_IDCODE_ONLY USES GV;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $0f;
    WAIT IDLE, 1 CYCLES;
    DRSCAN 32, $00000000, CAPTURE ID[];
    EXPORT "IDCODE", ID[];
ENDPROC;

PROCEDURE VERIFY_RLOCK USES GV;
    IRSCAN 8, $84,COMPARE $04,$04,PASS;
ENDPROC;

PROCEDURE DO_VERIFY_PGM_RLOCK USES GV,DO_EXIT,VERIFY_RLOCK;
    CALL VERIFY_RLOCK;
    IF ( ! (PASS==0) ) THEN GOTO RLOCK_PGM_PASS;
    STATUS = 10;
    PRINT "Failed to enable FPGA Array.";
    UNIQUEEXITCODE = 32891;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    RLOCK_PGM_PASS:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DO_VERIFY_RLOCK USES GV,DO_EXIT,VERIFY_RLOCK;
    CALL VERIFY_RLOCK;
    IF ( ! (PASS==0) ) THEN GOTO RLOCK_VERIFY_PASS;
    STATUS = 11;
    PRINT "FPGA Array is not enabled.";
    UNIQUEEXITCODE = 32892;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    RLOCK_VERIFY_PASS:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE VERIFY_IDCODE USES GV,PARAMETERS,DO_EXIT;
    FREQUENCY (FREQ*1000000);
    WAIT RESET, 5 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $0f;
    DRSCAN 32, $00000000;
    WAIT IDLE, 1 CYCLES;
    DRSCAN 32, $00000000, CAPTURE ID[],COMPARE IDCODEVALUE[],IDMASK[],PASS;
    IF ( ! (PASS==0) ) THEN GOTO IDOK;
    STATUS = 6;
    PRINT "Failed to verify IDCODE";
    UNIQUEEXITCODE = 32797;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    IDOK:
    IDREV = INT(ID[31..28]);
    IDFAB = INT(ID[24..24]);
ENDPROC;

PROCEDURE IS_SECOK USES GV,DO_EXIT;
    IF ( ! (SECKEY_OK==0) ) THEN GOTO SECOK;
    STATUS = -35;
    PRINT "Failed to match pass key.";
    UNIQUEEXITCODE = 32799;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    SECOK:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DO_CHECK_R USES GV,DO_EXIT,DO_READ_SECURITY;
    CALL DO_READ_SECURITY;
    IF ( ! (ULARE==1) ) THEN GOTO ARRAYEPR;
    STATUS = -33;
    PRINT "FPGA Array Encryption is enforced. Plain text verification is prohibited.";
    UNIQUEEXITCODE = 32800;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    ARRAYEPR:
    IF ( ! (ULARD==1) ) THEN GOTO SKIPRCHK1;
    STATUS = -30;
    PRINT "FPGA Array Verification is protected by pass key.";
    PRINT "A valid pass key needs to be provided.";
    UNIQUEEXITCODE = 32804;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    SKIPRCHK1:
    IF ( ! (ULARD==0) ) THEN GOTO Label_80;
    CHKSEC = 0;
    Label_80:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DO_CHECK_W USES GV,DO_EXIT,DO_READ_SECURITY;
    CALL DO_READ_SECURITY;
    IF ( ! (ULAWE==1) ) THEN GOTO ARRAYWP;
    STATUS = -28;
    PRINT "FPGA Array Write/Erase is protected by pass key.";
    PRINT "A valid pass key needs to be provided.";
    UNIQUEEXITCODE = 32805;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    ARRAYWP:
    IF ( ! (ULARD==1) ) THEN GOTO ARRAYRPW;
    STATUS = -30;
    PRINT "FPGA Array Verification is protected by pass key.";
    PRINT "A valid pass key needs to be provided.";
    UNIQUEEXITCODE = 32806;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    ARRAYRPW:
    IF ( ! (ULARE==1) ) THEN GOTO ARRAYEPW;
    STATUS = -33;
    PRINT "FPGA Array Encryption is enforced. Plain text programming is prohibited.";
    CALL DO_EXIT;
    ARRAYEPW:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE BP_VER USES GV;
    BOOLEAN PLAYER_VERSION_BOOLEAN[32];
    PLAYER_VERSION_BOOLEAN[31..0] = BOOL(PLAYERVERSIONVARIABLE);
    INTEGER PLAYER_MAJOR_VERSION =(INT(PLAYER_VERSION_BOOLEAN[23..16])-SCULPTORMAJORBASE);
    INTEGER PLAYER_MINOR_VERSION =(INT(PLAYER_VERSION_BOOLEAN[15..8])-SCULPTORMINORBASE);
    ACT_UROW_SW_VERSION[6..5] = BOOL(PLAYER_MAJOR_VERSION);
    ACT_UROW_SW_VERSION[4..1] = BOOL(PLAYER_MINOR_VERSION);
    ACT_UROW_SW_VERSION[0] = PLAYER_VERSION_BOOLEAN[0];
ENDPROC;

PROCEDURE SET_PRG_ARRAY USES GV;
    ISPRGARRAY = 1;
ENDPROC;

PROCEDURE DO_INITIALIZE USES GV,DO_EXIT,READ_F_ROW,DO_CHECK_R,DO_CHECK_W,BP_VER;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $7f;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 50 USEC;
    BSR[287..0] = BSRPATTERN[287..0];
    BOOLEAN SHIFT_DATA[288];
    IRSCAN 8, $01;
    DRSCAN 288, BSR[];
    WAIT IDLE, 1 CYCLES;
    DRSCAN 288, SHIFT_DATA[], CAPTURE SAMPLE_DEVICE[];
    FOR I = 0 TO 287;
        IF ( ! (SAMPLEMASK[I]==1) ) THEN GOTO Label_81;
        BSR[I] = SAMPLE_DEVICE[I];
        Label_81:
        LABEL_SEPARATOR = 0;
    NEXT I;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $01;
    DRSCAN 288, BSR[];
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $c0;
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $80;
    DRSCAN 18, $00000;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 1875 USEC;
    DRSCAN 18, $00000, CAPTURE ISC_CONFIG_RESULT[],COMPARE $30000,$30000,PASS;
    IF ( ! (PASS==0) ) THEN GOTO CRCOK;
    STATUS = 5;
    PRINT "Failed to enter programming mode.";
    EXPORT "ISC_Config_Result", ISC_CONFIG_RESULT[];
    UNIQUEEXITCODE = 32850;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    CRCOK:
    FADDR[] = $0;
    CALL READ_F_ROW;
    EXPORT "FSN", BUFF128[55..8];
    FADDR[] = $4;
    CALL READ_F_ROW;
    IF ( ! (BUFF128[55]!=0) ) THEN GOTO Label_82;
    PASS = 0;
    Label_82:
    IF ( ! (PASS==0) ) THEN GOTO CHECKOK;
    STATUS = 6;
    PRINT "Failed to verify IDCODE";
    UNIQUEEXITCODE = 32851;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    CHECKOK:
    IF ( ! (CHKARRAY==1) ) THEN GOTO SKIPCHKARRAY;
    IF ( ! (ARRAYRONLY==0) ) THEN GOTO Label_83;
    CALL DO_CHECK_W;
    Label_83:
    IF ( ! (ARRAYRONLY==1) ) THEN GOTO Label_84;
    CALL DO_CHECK_R;
    Label_84:
    LABEL_SEPARATOR = 0;
    SKIPCHKARRAY:
    IF ( ! (PLAYERVERSIONVARIABLE!=0) ) THEN GOTO Label_85;
    CALL BP_VER;
    Label_85:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE READ_INITIALIZE USES GV,DO_INITIALIZE;
    CHKFROM = 0;
    CHKARRAY = 0;
    CHKNVM = 0;
    CHKSEC = 0;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE NW_INITIALIZE_COMMON USES GV;
    CHKFROM = 0;
    CHKARRAY = 0;
ENDPROC;

PROCEDURE NW_INITIALIZE USES DO_INITIALIZE,NW_INITIALIZE_COMMON;
    CALL NW_INITIALIZE_COMMON;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE NR_INITIALIZE_COMMON USES GV;
    CHKFROM = 0;
    CHKARRAY = 0;
ENDPROC;

PROCEDURE NR_INITIALIZE USES DO_INITIALIZE,NR_INITIALIZE_COMMON;
    CALL NR_INITIALIZE_COMMON;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE AW_INITIALIZE USES GV,DO_INITIALIZE;
    ARRAYRONLY = 0;
    CHKFROM = 0;
    CHKARRAY = 1;
    CHKNVM = 0;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE AR_INITIALIZE USES GV,DO_INITIALIZE;
    ARRAYRONLY = 1;
    CHKFROM = 0;
    CHKARRAY = 1;
    CHKNVM = 0;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE W_INITIALIZE USES GV,DO_INITIALIZE;
    ARRAYRONLY = 0;
    CHKARRAY = 1;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE R_INITIALIZE USES GV,DO_INITIALIZE;
    ARRAYRONLY = 1;
    CHKARRAY = 1;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE INITIALIZE USES GV,DO_INITIALIZE;
    ARRAYRONLY = 0;
    FROMRONLY = 0;
    CHKFROM = 1;
    CHKARRAY = 1;
    CALL DO_INITIALIZE;
ENDPROC;

PROCEDURE POLL_ERASE USES GV;
    PASS = 0;
    INTEGER ILOOP_0;
    FOR ILOOP_0 = 262141 - 1 TO 0 STEP -1;
        IRSTOP IRPAUSE;
        DRSTOP DRPAUSE;
        IRSCAN 8, $84;
        WAIT IDLE, 1 CYCLES;
        WAIT IDLE, 1000 USEC;
        DRSCAN 5, $00,COMPARE $00,$03,PASS;
        IF PASS THEN ILOOP_0 = 0;
    NEXT ILOOP_0;
ENDPROC;

PROCEDURE POLL_PROGRAM USES GV;
    INTEGER ILOOP_1;
    FOR ILOOP_1 = 16381 - 1 TO 0 STEP -1;
        IRSTOP IRPAUSE;
        DRSTOP DRPAUSE;
        IRSCAN 8, $84;
        WAIT IDLE, 1 CYCLES;
        WAIT IDLE, 100 USEC;
        DRSCAN 5, $00,COMPARE $00,$0b,PASS;
        IF PASS THEN ILOOP_1 = 0;
    NEXT ILOOP_1;
ENDPROC;

PROCEDURE PROGRAM_UROW USES GV,BITSTREAM,DO_EXIT,POLL_PROGRAM;
    FOR FROMROWNUMBER = NUMBEROFFROMROWS TO 1 STEP -1;
        IRSTOP IRPAUSE;
        DRSTOP DRPAUSE;
        IRSCAN 8, $9f;
        DRSCAN 3, BOOL((FROMROWNUMBER-1));
        WAIT IDLE, 1 CYCLES;
        IRSTOP IRPAUSE;
        DRSTOP DRPAUSE;
        IRSCAN 8, $9b;
        DRSCAN 128, $ffffffffffffffffffffffffffffffff;
        WAIT IDLE, 5 CYCLES;
        WAIT IDLE, 10000 USEC;
    NEXT FROMROWNUMBER;
    IF ( ! (ISERASEONLY==0) ) THEN GOTO SKIP_CYC_INCREMENT;
    IF ( ! ( (ISPRGARRAY==1)&&(ACT_UROW_CYCLE_COUNT!=1023)) ) THEN GOTO Label_86;
    ACT_UROW_CYCLE_COUNT = (ACT_UROW_CYCLE_COUNT+1);
    Label_86:
    LABEL_SEPARATOR = 0;
    SKIP_CYC_INCREMENT:
    IF ( ! (ISERASEONLY==1) ) THEN GOTO Label_87;
    UROW[] = $ffffffffffffffffffffffffffffffff;
    Label_87:
    IF ( ! ( (ISERASEONLY==0)||(ISRESTOREDESIGN==1)) ) THEN GOTO SKIP_DESIGN_INFO;
    BUFF32[31..0] = BOOL(CHECKSUM);
    IF ( ! ( !ISRESTOREDESIGN) ) THEN GOTO Label_88;
    UROW[127..112] = BUFF32[15..0];
    Label_88:
    IF ( ! ISRESTOREDESIGN ) THEN GOTO Label_89;
    UROW[127..112] = SUROWCHECKSUM[15..0];
    Label_89:
    IF ( ! ( !ISRESTOREDESIGN) ) THEN GOTO Label_90;
    UROW[101..32] = ACT_UROW_DESIGN_NAME[69..0];
    Label_90:
    IF ( ! ISRESTOREDESIGN ) THEN GOTO Label_91;
    UROW[101..32] = SUROWDESIGNNAME[69..0];
    Label_91:
    LABEL_SEPARATOR = 0;
    SKIP_DESIGN_INFO:
    BUFF32[31..0] = BOOL(ACT_UROW_CYCLE_COUNT);
    UROW[111..102] = BUFF32[9..0];
    UROW[31..29] = ACT_UROW_PROG_METHOD[2..0];
    UROW[28..25] = ACT_UROW_ALGO_VERSION[3..0];
    UROW[16..10] = ACT_UROW_SW_VERSION[6..0];
    UROW[9..6] = ACT_UROW_PROGRAM_SW[3..0];
    UROW[4] = SUROW_SRAM_DISTURB[0];
    IF ( ! (ACT_UROW_ALGO_VERSION[6]==1) ) THEN GOTO Label_92;
    UROW[5] = 1;
    UROW[0] = 0;
    UROW[24..23] = ACT_UROW_ALGO_VERSION[5..4];
    Label_92:
    IF ( ! (ACT_UROW_ALGO_VERSION[6]==0) ) THEN GOTO Label_93;
    UROW[5] = 0;
    UROW[0] = 1;
    UROW[24..23] = ACT_UROW_ALGO_VERSION[5..4];
    Label_93:
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $a7;
    DRSCAN 128, UROW[];
    WAIT IDLE, 15 CYCLES;
    CALL POLL_PROGRAM;
    IF ( ! (PASS==0) ) THEN GOTO PROGRAM_OK3;
    STATUS = -24;
    PRINT "Failed to program UROW";
    UNIQUEEXITCODE = 32853;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    PROGRAM_OK3:
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $c0;
    WAIT IDLE, 1 CYCLES;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $a8;
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 165 USEC;
    DRSCAN 128, $00000000000000000000000000000000,COMPARE UROW[],UROW_MASK[],PASS;
    IF ( ! (PASS==0) ) THEN GOTO UROW_OK;
    STATUS = -24;
    PRINT "Failed to program UROW";
    UNIQUEEXITCODE = 32854;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    UROW_OK:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE FAIL_ERASE USES GV,DO_EXIT;
    STATUS = 8;
    PRINT "Failed Erase Operation";
    UNIQUEEXITCODE = 32855;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
ENDPROC;

PROCEDURE EXE_ERASE USES BITSTREAM,GV,READ_UROW,POLL_ERASE,PROGRAM_UROW,FAIL_ERASE;
    IF ( ! (COMBERASESELECT[14]==1) ) THEN GOTO SKIPRUROW;
    CALL READ_UROW;
    EXPORT "ACTEL_SLOG_UROW", UROW[];
    SKIPRUROW:
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $85;
    DRSCAN 23, COMBERASESELECT[];
    WAIT IDLE, 3 CYCLES;
    CALL POLL_ERASE;
    IF ( ! (PASS==0) ) THEN GOTO ERASEOK;
    CALL FAIL_ERASE;
    ERASEOK:
    IF ( ! (COMBERASESELECT[14]==1) ) THEN GOTO Label_94;
    CALL PROGRAM_UROW;
    Label_94:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DO_ERASE USES GV,EXE_ERASE;
    PRINT "Erase ...";
    COMBERASESELECT[22..0] = $004000;
    COMBERASESELECT[0] = 1;
    CALL EXE_ERASE;
    PRINT "Completed erase";
ENDPROC;

PROCEDURE DO_ERASE_ARRAY USES GV,EXE_ERASE;
    PRINT "Erase FPGA Array ...";
    COMBERASESELECT[22..0] = $004001;
    CALL EXE_ERASE;
ENDPROC;

PROCEDURE DO_ERASE_ONLY USES GV,DO_ERASE;
    ISERASEONLY = 1;
    CALL DO_ERASE;
ENDPROC;

PROCEDURE DO_ERASE_ARRAY_ONLY USES GV,DO_ERASE_ARRAY;
    ISERASEONLY = 1;
    CALL DO_ERASE_ARRAY;
ENDPROC;

PROCEDURE DO_ERASE_ALL USES GV,EXE_ERASE;
    IF ( ! ( (BM7DEVICE==1)||(BM1DEVICE==1)) ) THEN GOTO Label_95;
    PRINT "Erase FPGA Array and FlashROM ...";
    Label_95:
    IF ( ! ( (BM7DEVICE!=1)&&(BM1DEVICE!=1)) ) THEN GOTO Label_96;
    PRINT "Erase FPGA Array, FlashROM and Security Settings ...";
    Label_96:
    COMBERASESELECT[22..0] = $7fc00f;
    ISERASEONLY = 1;
    CALL EXE_ERASE;
ENDPROC;

PROCEDURE LOAD_ROW_DATA USES BITSTREAM,GV;
    FOR SDTILE = 1 TO NUMBEROFSDTILES;
        FOR I = 1 TO 8;
            IRSTOP IRPAUSE;
            DRSTOP DRPAUSE;
            IRSCAN 8, $89;
            DRSCAN 26, DATASTREAM[(DATAINDEX+25)..DATAINDEX];
            WAIT IDLE, 3 CYCLES;
            DATAINDEX = (DATAINDEX+26);
        NEXT I;
    NEXT SDTILE;
ENDPROC;

PROCEDURE EXE_PROGRAM USES GV,DO_EXIT,POLL_PROGRAM;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $83;
    WAIT IDLE, 3 CYCLES;
    CALL POLL_PROGRAM;
    IF ( ! (PASS==0) ) THEN GOTO Label_97;
    STATUS = 10;
    PRINT "Failed to program FPGA array at row ",ROWNUMBER,".";
    UNIQUEEXITCODE = 32856;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    Label_97:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE EXE_VERIFY USES GV,DO_EXIT,POLL_PROGRAM;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $8d;
    DRSCAN 2, VERIFYEOL[];
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 132 USEC;
    CALL POLL_PROGRAM;
    IF ( ! (PASS==0) ) THEN GOTO Label_98;
    STATUS = 11;
    PRINT "Verify 0 failed at row ",ROWNUMBER,".";
    UNIQUEEXITCODE = 32857;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    Label_98:
    IRSCAN 8, $8d;
    DRSCAN 2, VERIFYEOL[],COMPARE $0,$3,PASS;
    IF ( ! (PASS==0) ) THEN GOTO Label_99;
    STATUS = 11;
    PRINT "Verify 0 failed at row ",ROWNUMBER,".";
    UNIQUEEXITCODE = 32858;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    Label_99:
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $8e;
    DRSCAN 2, VERIFYEOL[];
    WAIT IDLE, 3 CYCLES;
    WAIT IDLE, 132 USEC;
    CALL POLL_PROGRAM;
    IF ( ! (PASS==0) ) THEN GOTO Label_100;
    STATUS = 11;
    PRINT "Verify 1 failed at row ",ROWNUMBER,".";
    UNIQUEEXITCODE = 32859;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    Label_100:
    IRSCAN 8, $8e;
    DRSCAN 2, VERIFYEOL[],COMPARE $0,$3,PASS;
    IF ( ! (PASS==0) ) THEN GOTO Label_101;
    STATUS = 11;
    PRINT "Verify 1 failed at row ",ROWNUMBER,".";
    UNIQUEEXITCODE = 32860;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    Label_101:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DO_PROGRAM USES GV,LOAD_ROW_DATA,EXE_PROGRAM;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $87;
    DRSCAN 2, $2;
    WAIT IDLE, 3 CYCLES;
    PRINT "Programming FPGA Array";
    DATAINDEX = 0;
    ROWNUMBER = (NUMBEROFMAPROWS-1);
    INTEGER IREPEAT_0;
    FOR IREPEAT_0 = NUMBEROFMAPROWS - 1 TO 0 STEP -1;
        CALL LOAD_ROW_DATA;
        CALL EXE_PROGRAM;
        IRSTOP IRPAUSE;
        DRSTOP DRPAUSE;
        IRSCAN 8, $87;
        DRSCAN 2, $3;
        WAIT IDLE, 3 CYCLES;
        IF ( ! ((ROWNUMBER%ROWITERATION)==0) ) THEN GOTO Label_102;
        PERCENT_UPDATE = ((100*((NUMBEROFMAPROWS-ROWNUMBER)+1))/NUMBEROFMAPROWS);
        DIFFERENCE = (PERCENT_UPDATE%10);
        IF ( ! (DIFFERENCE>=5) ) THEN GOTO ROUND_DOWN_PGM_A;
        PERCENT_UPDATE = (PERCENT_UPDATE+(10-DIFFERENCE));
        ROUND_DOWN_PGM_A:
        IF ( ! (DIFFERENCE<5) ) THEN GOTO ROUND_UP_PGM_A;
        PERCENT_UPDATE = (PERCENT_UPDATE-DIFFERENCE);
        ROUND_UP_PGM_A:
        EXPORT "PERCENT_DONE", PERCENT_UPDATE;
        Label_102:
        ROWNUMBER = (ROWNUMBER-1);
    NEXT IREPEAT_0;
ENDPROC;

PROCEDURE DO_VERIFY USES GV,LOAD_ROW_DATA,EXE_VERIFY;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $87;
    DRSCAN 2, $2;
    WAIT IDLE, 3 CYCLES;
    PRINT "Verifying FPGA Array";
    DATAINDEX = 0;
    ROWNUMBER = (NUMBEROFMAPROWS-1);
    INTEGER IREPEAT_1;
    FOR IREPEAT_1 = NUMBEROFMAPROWS - 1 TO 0 STEP -1;
        CALL LOAD_ROW_DATA;
        CALL EXE_VERIFY;
        IRSTOP IRPAUSE;
        DRSTOP DRPAUSE;
        IRSCAN 8, $87;
        DRSCAN 2, $3;
        WAIT IDLE, 3 CYCLES;
        IF ( ! ((ROWNUMBER%ROWITERATION)==0) ) THEN GOTO Label_103;
        PERCENT_UPDATE = ((100*((NUMBEROFMAPROWS-ROWNUMBER)+1))/NUMBEROFMAPROWS);
        DIFFERENCE = (PERCENT_UPDATE%10);
        IF ( ! (DIFFERENCE>=5) ) THEN GOTO ROUND_DOWN_VER_ARRAY;
        PERCENT_UPDATE = (PERCENT_UPDATE+(10-DIFFERENCE));
        ROUND_DOWN_VER_ARRAY:
        IF ( ! (DIFFERENCE<5) ) THEN GOTO ROUND_UP_VER_ARRAY;
        PERCENT_UPDATE = (PERCENT_UPDATE-DIFFERENCE);
        ROUND_UP_VER_ARRAY:
        EXPORT "PERCENT_DONE", PERCENT_UPDATE;
        Label_103:
        ROWNUMBER = (ROWNUMBER-1);
    NEXT IREPEAT_1;
    PRINT "        Verifying FPGA Array -- pass";
ENDPROC;

PROCEDURE DO_VERIFY_BOL USES GV,DO_VERIFY;
    VERIFYEOL[0] = 0;
    IF ( ! (IDREV==3) ) THEN GOTO Label_104;
    VERIFYEOL[0] = 1;
    Label_104:
    CALL DO_VERIFY;
ENDPROC;

PROCEDURE DO_VERIFY_EOL USES GV,DO_VERIFY;
    VERIFYEOL[0] = 1;
    CALL DO_VERIFY;
ENDPROC;

PROCEDURE DO_PROGRAM_RLOCK USES GV,DO_EXIT,POLL_PROGRAM;
    DATAINDEX = 0;
    INTEGER IREPEAT_2;
    FOR IREPEAT_2 = NUMBEROFSDTILES - 1 TO 0 STEP -1;
        FOR I = 1 TO 8;
            IRSTOP IRPAUSE;
            DRSTOP DRPAUSE;
            IRSCAN 8, $89;
            DRSCAN 26, RLOCK[(DATAINDEX+25)..DATAINDEX];
            WAIT IDLE, 3 CYCLES;
            DATAINDEX = (DATAINDEX+26);
        NEXT I;
    NEXT IREPEAT_2;
    IRSTOP IRPAUSE;
    DRSTOP DRPAUSE;
    IRSCAN 8, $8c;
    WAIT IDLE, 3 CYCLES;
    CALL POLL_PROGRAM;
    IF ( ! (PASS==0) ) THEN GOTO Label_105;
    STATUS = 10;
    PRINT "Failed to enable FPGA Array.";
    UNIQUEEXITCODE = 32862;
    BUFF128[15..0] = BOOL(UNIQUEEXITCODE);
    EXPORT "ERROR_CODE", BUFF128[15..0];
    CALL DO_EXIT;
    Label_105:
    LABEL_SEPARATOR = 0;
ENDPROC;

PROCEDURE DO_READ_IDCODE USES READ_IDCODE_ONLY;
    WAIT RESET, 5 CYCLES;
    CALL READ_IDCODE_ONLY;
    EXIT 0;
ENDPROC;


CRC 41F4;
